/**
 * Grid
 */

/* $. Imports
\*----------------------------------------------------------------*/

@import "./node_modules/groot-sass/groot";



// Core
$gr-grid: "grid";                           // Main grid container which holds all elements
$gr-item: "grid__item";                     // Individual grid item/cell/unit/whatever you want to call it.
$gr-item-unit: "grid__item";                // The class chained onto the same element as above which controls the sizing.

// Modifiers
$gr-grid-spaced: "grid--spaced";            // Increase gutter size
$gr-grid-compact: "grid--compact";          // Remove all gutters
$gr-grid-reversed: "grid--reversed";        // Reverse direction of the grid. i.e. direction: rtl;
$gr-grid-centered: "grid--centered";        // Centers the entire Grid, which grid items will inherit.
$gr-item-centered: "grid__item--centered";  // Center an individual item, rather than all items.

// Sizing
$gr-gutter: 1em;                            // The size between each grid item. Can use any CSS unit of measurement.

// Grid Alignment
$gr-grid-direction: inherit;                // Initial direction of the $gr-grid
$gr-grid-align-x: inherit;                  // Initial horizontal alignment of the $gr-grid.

// Item Alignment
$gr-item-direction: inherit;                // Initial direction of the $gr-item
$gr-item-align-x: inherit;                  // Initial horizontal alignment of the $gr-item
$gr-item-align-y: top;                      // Initial vertical alignment of the $gr-item



/* $. Configuration
\*----------------------------------------------------------------*/

@include groot(12);

@include respond-min($bp1) {
    @include groot(12, "bp1");
}
@include respond-min($bp2) {
    @include groot(12, "bp2");
}
@include respond-min($bp3) {
    @include groot(12 5, "bp3");
}
@include respond-min($bp4) {
    @include groot(12 5, "bp4");
}
@include respond-min($bp5) {
    @include groot(12 5, "bp5");
}


/* $. Additional push/pull functions for Groot
\*----------------------------------------------------------------*/

@include respond-min($bp2) {
	.grid__item--push-8-bp2 {
		left: ((1/12)*8) * 100%;
		position: relative;
	}
	.grid__item--pull-4-bp2 {
		left: -((1/12)*4) * 100%;
		position: relative;
	}
}

@include respond-min($bp3) {
	.grid__item--push-8-bp3 {
		left: ((1/12)*8) * 100%;
		position: relative;
	}
	.grid__item--pull-4-bp3 {
		left: -((1/12)*4) * 100%;
		position: relative;
	}
}


/* $. Flex extension, for equal height on modern browsers.
\*----------------------------------------------------------------*/

.test--flexbox {

    .grid--flex {
        display: flex;
        flex-wrap: wrap;

        .grid__item {
            display: flex;

            > * {
                display: flex;
                padding-bottom: $base;
                width: 100%;
            }
        }
    }

}
